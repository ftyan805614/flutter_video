// ignore_for_file: non_constant_identifier_names
// ignore_for_file: camel_case_types
// ignore_for_file: prefer_single_quotes

// This file is automatically generated. DO NOT EDIT, all your changes would be lost.
import 'package:flutter/material.dart' show debugPrint;
import 'package:polynesia/application/data/models/config_entity.dart';
import 'package:polynesia/application/data/models/home_entity.dart';
import 'package:polynesia/application/data/models/messages_entity.dart';
import 'package:polynesia/application/data/models/plat_entity.dart';
import 'package:polynesia/application/data/models/promotion_entity.dart';
import 'package:polynesia/application/data/models/sign_config_entity.dart';
import 'package:polynesia/application/data/models/user_detail_entity.dart';
import 'package:polynesia/application/data/models/user_entity.dart';

JsonConvert jsonConvert = JsonConvert();
typedef JsonConvertFunction<T> = T Function(Map<String, dynamic> json);

class JsonConvert {
  static final Map<String, JsonConvertFunction> _convertFuncMap = {
    (ConfigEntity).toString(): ConfigEntity.fromJson,
    (HomeEntity).toString(): HomeEntity.fromJson,
    (HomeGame).toString(): HomeGame.fromJson,
    (HomeGameList).toString(): HomeGameList.fromJson,
    (HomeGameListMaintenance).toString(): HomeGameListMaintenance.fromJson,
    (HomeBanner).toString(): HomeBanner.fromJson,
    (HomeNotice).toString(): HomeNotice.fromJson,
    (HomeNoticeList).toString(): HomeNoticeList.fromJson,
    (HomeMatchPreview).toString(): HomeMatchPreview.fromJson,
    (MessagesEntity).toString(): MessagesEntity.fromJson,
    (MsgEntity).toString(): MsgEntity.fromJson,
    (PlatEntity).toString(): PlatEntity.fromJson,
    (PromotionEntity).toString(): PromotionEntity.fromJson,
    (PromotionPromotionsResDto).toString(): PromotionPromotionsResDto.fromJson,
    (SignConfigEntity).toString(): SignConfigEntity.fromJson,
    (UserDetailEntity).toString(): UserDetailEntity.fromJson,
    (UserEntity).toString(): UserEntity.fromJson,
  };

  T? convert<T>(dynamic value) {
    if (value == null) {
      return null;
    }
    return asT<T>(value);
  }

  List<T?>? convertList<T>(List<dynamic>? value) {
    if (value == null) {
      return null;
    }
    try {
      return value.map((dynamic e) => asT<T>(e)).toList();
    } catch (e, stackTrace) {
      debugPrint('asT<$T> $e $stackTrace');
      return <T>[];
    }
  }

  List<T>? convertListNotNull<T>(dynamic value) {
    if (value == null) {
      return null;
    }
    try {
      return (value as List<dynamic>).map((dynamic e) => asT<T>(e)!).toList();
    } catch (e, stackTrace) {
      debugPrint('asT<$T> $e $stackTrace');
      return <T>[];
    }
  }

  T? asT<T extends Object?>(dynamic value) {
    if (value is T) {
      return value;
    }
    final String type = T.toString();
    try {
      final String valueS = value.toString();
      if (type == "String") {
        return valueS as T;
      } else if (type == "int") {
        final int? intValue = int.tryParse(valueS);
        if (intValue == null) {
          return double.tryParse(valueS)?.toInt() as T?;
        } else {
          return intValue as T;
        }
      } else if (type == "double") {
        return double.parse(valueS) as T;
      } else if (type == "DateTime") {
        return DateTime.parse(valueS) as T;
      } else if (type == "bool") {
        if (valueS == '0' || valueS == '1') {
          return (valueS == '1') as T;
        }
        return (valueS == 'true') as T;
      } else if (type == "Map" || type.startsWith("Map<")) {
        return value as T;
      } else {
        if (_convertFuncMap.containsKey(type)) {
          return _convertFuncMap[type]!(value) as T;
        } else {
          throw UnimplementedError('$type unimplemented');
        }
      }
    } catch (e, stackTrace) {
      debugPrint('asT<$T> $e $stackTrace');
      return null;
    }
  }

  //list is returned by type
  static M? _getListChildType<M>(List<Map<String, dynamic>> data) {
    if (<ConfigEntity>[] is M) {
      return data.map<ConfigEntity>((Map<String, dynamic> e) => ConfigEntity.fromJson(e)).toList() as M;
    }
    if (<HomeEntity>[] is M) {
      return data.map<HomeEntity>((Map<String, dynamic> e) => HomeEntity.fromJson(e)).toList() as M;
    }
    if (<HomeGame>[] is M) {
      return data.map<HomeGame>((Map<String, dynamic> e) => HomeGame.fromJson(e)).toList() as M;
    }
    if (<HomeGameList>[] is M) {
      return data.map<HomeGameList>((Map<String, dynamic> e) => HomeGameList.fromJson(e)).toList() as M;
    }
    if (<HomeGameListMaintenance>[] is M) {
      return data.map<HomeGameListMaintenance>((Map<String, dynamic> e) => HomeGameListMaintenance.fromJson(e)).toList() as M;
    }
    if (<HomeBanner>[] is M) {
      return data.map<HomeBanner>((Map<String, dynamic> e) => HomeBanner.fromJson(e)).toList() as M;
    }
    if (<HomeNotice>[] is M) {
      return data.map<HomeNotice>((Map<String, dynamic> e) => HomeNotice.fromJson(e)).toList() as M;
    }
    if (<HomeNoticeList>[] is M) {
      return data.map<HomeNoticeList>((Map<String, dynamic> e) => HomeNoticeList.fromJson(e)).toList() as M;
    }
    if (<HomeMatchPreview>[] is M) {
      return data.map<HomeMatchPreview>((Map<String, dynamic> e) => HomeMatchPreview.fromJson(e)).toList() as M;
    }
    if (<MessagesEntity>[] is M) {
      return data.map<MessagesEntity>((Map<String, dynamic> e) => MessagesEntity.fromJson(e)).toList() as M;
    }
    if (<MsgEntity>[] is M) {
      return data.map<MsgEntity>((Map<String, dynamic> e) => MsgEntity.fromJson(e)).toList() as M;
    }
    if (<PlatEntity>[] is M) {
      return data.map<PlatEntity>((Map<String, dynamic> e) => PlatEntity.fromJson(e)).toList() as M;
    }
    if (<PromotionEntity>[] is M) {
      return data.map<PromotionEntity>((Map<String, dynamic> e) => PromotionEntity.fromJson(e)).toList() as M;
    }
    if (<PromotionPromotionsResDto>[] is M) {
      return data.map<PromotionPromotionsResDto>((Map<String, dynamic> e) => PromotionPromotionsResDto.fromJson(e)).toList() as M;
    }
    if (<SignConfigEntity>[] is M) {
      return data.map<SignConfigEntity>((Map<String, dynamic> e) => SignConfigEntity.fromJson(e)).toList() as M;
    }
    if (<UserDetailEntity>[] is M) {
      return data.map<UserDetailEntity>((Map<String, dynamic> e) => UserDetailEntity.fromJson(e)).toList() as M;
    }
    if (<UserEntity>[] is M) {
      return data.map<UserEntity>((Map<String, dynamic> e) => UserEntity.fromJson(e)).toList() as M;
    }

    debugPrint("${M.toString()} not found");

    return null;
  }

  static M? fromJsonAsT<M>(dynamic json) {
    if (json is List) {
      return _getListChildType<M>(json.map((e) => e as Map<String, dynamic>).toList());
    } else {
      return jsonConvert.asT<M>(json);
    }
  }
}
